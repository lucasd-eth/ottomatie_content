import { supabase } from "../config/supabaseClient.js";
import { generateEmbedding } from "../ragmodel/embedding.js";

//document_api(document_id, adduser_id, tags, content, link, created_at)
    export const createDocument = async ({ adduser, content, link }) => {
        try {
            // üîπ 1. Ki·ªÉm tra ƒë·∫ßu v√†o
            if (!adduser || !content || !link ) {
                throw new Error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o");
            }
            const embedding = await generateEmbedding(content);
            if (!embedding) throw new Error("Embedding generation failed.");

            // üîπ 2. G·ªçi API t∆∞∆°ng t√°c v·ªõi database 
            const { data, error } = await supabase
                .from("document")
                .insert([{ adduser, content, link, embedding}])
                .select()
                .single();

            // üîπ 3. Ki·ªÉm tra l·ªói t·ª´ database
            if (error) throw new Error(`L·ªói t·ª´ DB: ${error.message}`);

            // üîπ 4. Log v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ n·∫øu th√†nh c√¥ng
            console.log("‚úÖ T·∫°o t√†i li·ªáu th√†nh c√¥ng:", data);
            return { success: true, data };
        } catch (error) {
            // üîπ 5. B·∫Øt l·ªói, log l·ªói v√† tr·∫£ v·ªÅ response ph√π h·ª£p
            console.error("‚ùå L·ªói createDocument:", error.message);
            return { success: false, message: error.message };
        }
    };
    
    export const getDocumentById = async (document_id) => {
        try {
            if (!document_id) throw new Error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o");
    
            const { data, error } = await supabase
                .from("document")
                .select("*")
                .eq("document_id", document_id)
                .single();
    
            if (error) throw new Error(`L·ªói t·ª´ DB: ${error.message}`);
    
            console.log("‚úÖ L·∫•y t√†i li·ªáu th√†nh c√¥ng:", data);
            return { success: true, data };
        } catch (error) {
            console.error("‚ùå L·ªói getDocumentById:", error.message);
            return { success: false, message: error.message };
        }
    };
    
    export const updateDocument = async (document_id, updates) => {
        try {
            if (!document_id || !updates) throw new Error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o");
    
            const { data, error } = await supabase
                .from("document")
                .update(updates)
                .eq("document_id", document_id)
                .select()
                .single();
    
            if (error) throw new Error(`L·ªói t·ª´ DB: ${error.message}`);
    
            console.log("‚úÖ C·∫≠p nh·∫≠t t√†i li·ªáu th√†nh c√¥ng:", data);
            return { success: true, data };
        } catch (error) {
            console.error("‚ùå L·ªói updateDocument:", error.message);
            return { success: false, message: error.message };
        }
    };
    
    export const deleteDocument = async (document_id) => {
        try {
            if (!document_id) throw new Error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o");
    
            const { error } = await supabase
                .from("document")
                .delete()
                .eq("document_id", document_id);
    
            if (error) throw new Error(`L·ªói t·ª´ DB: ${error.message}`);
    
            console.log(`‚úÖ X√≥a t√†i li·ªáu th√†nh c√¥ng: ${document_id}`);
            return { success: true, message: "X√≥a th√†nh c√¥ng" };
        } catch (error) {
            console.error("‚ùå L·ªói deleteDocument:", error.message);
            return { success: false, message: error.message };
        }
    };
